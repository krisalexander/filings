var Connection, FormFour, Names, Transactions, async, fetchTransaction, fs, intComma, optimist, parseOptions, path, ref;

fs = require('fs');

path = require('path');

optimist = require('optimist');

async = require('async');

intComma = require('humanize-plus').intComma;

ref = require('./filings'), Names = ref.Names, Connection = ref.Connection, Transactions = ref.Transactions, FormFour = ref.FormFour;

parseOptions = function(args) {
  var options;
  if (args == null) {
    args = [];
  }
  options = optimist(args);
  options.usage("Usage: flips <symbol>\n       flips <cik>");
  options.alias('h', 'help').describe('h', 'Print this usage message');
  options.alias('v', 'version').describe('v', 'Print the flips version');
  return options;
};

fetchTransaction = function(arg, callback) {
  var connection, transaction;
  connection = arg.connection, transaction = arg.transaction;
  return FormFour.fetch(connection, transaction, function(error, form) {
    var date, day, month, owner, profit;
    if (error != null) {
      console.error(error);
    } else {
      profit = form.getProfit();
      if (profit > 0) {
        date = transaction.date;
        month = "" + (date.getMonth() + 1);
        if (month.length === 1) {
          month = "0" + month;
        }
        day = "" + (date.getDate());
        if (day.length === 1) {
          day = "0" + day;
        }
        date = month + "/" + day + "/" + (date.getFullYear());
        owner = form.getOwner();
        console.log(date, "$" + (intComma(Math.floor(profit))) + " " + (Names.normalize(owner.name)) + " " + owner.title);
      }
    }
    return callback();
  });
};

module.exports = {
  run: function(args) {
    var cik, options;
    if (args == null) {
      args = process.argv.slice(2);
    }
    options = parseOptions(args);
    cik = options.argv._[0];
    if (options.argv.v) {
      return console.log(JSON.parse(fs.readFileSync('package.json')).version);
    } else if (options.argv.h) {
      return options.showHelp();
    } else if (cik) {
      return Transactions.fetch(cik, 4, function(error, transactions) {
        if (error != null) {
          console.error(error);
          return process.exit(1);
        } else {
          return Connection.open(function(connection) {
            var i, len, queue, results, transaction;
            queue = async.queue(fetchTransaction);
            queue.drain = function() {
              return connection.close();
            };
            results = [];
            for (i = 0, len = transactions.length; i < len; i++) {
              transaction = transactions[i];
              results.push(queue.push({
                connection: connection,
                transaction: transaction
              }));
            }
            return results;
          });
        }
      });
    } else {
      return options.showHelp();
    }
  }
};

// ---
// generated by coffee-script 1.9.2
