var DOMParser, TenK, archive, dates, xpath;

archive = require('ls-archive');

DOMParser = require('xmldom').DOMParser;

xpath = require('xpath');

dates = require('./dates');

module.exports = TenK = (function() {
  TenK.open = function(path, callback) {
    return archive.readGzip(path, function(error, data) {
      if (error != null) {
        return callback(error);
      } else {
        return callback(null, new TenK(data));
      }
    });
  };

  function TenK(contents) {
    this.document = new DOMParser().parseFromString(contents);
  }

  TenK.prototype.select = function(element) {
    var i, len, node, nodes, ref;
    nodes = [];
    ref = xpath.select("//*[local-name() = '" + element + "']", this.document);
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      if (node.prefix === 'us-gaap') {
        nodes.push(node);
      }
    }
    return nodes;
  };

  TenK.prototype.getProfit = function(year) {
    var i, len, netIncomeLoss, node, nodeNetIncomeLoss, nodeYear, nodes, ref;
    nodes = this.select('NetIncomeLoss');
    if (nodes.length === 0) {
      nodes = this.select('NetIncomeLossAvailableToCommonStockholdersBasic');
    }
    netIncomeLoss = 0;
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      nodeYear = dates.getYear((ref = xpath.select('@contextRef', node)[0]) != null ? ref.value : void 0);
      nodeNetIncomeLoss = parseFloat(node.firstChild.data);
      if (isNaN(nodeNetIncomeLoss)) {
        continue;
      }
      if (year === nodeYear) {
        netIncomeLoss += nodeNetIncomeLoss;
      }
    }
    return netIncomeLoss;
  };

  return TenK;

})();

// ---
// generated by coffee-script 1.9.2
