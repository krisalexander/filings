var Connection, Ftp, async, zlib,
  slice = [].slice;

Ftp = require('ftp');

async = require('async');

zlib = require('zlib');

module.exports = Connection = (function() {
  Connection.open = function(readyCallback) {
    return new Connection(readyCallback);
  };

  Connection.pool = function(numberOfConnections, callback) {
    var connectionQueue, connections, i, index, ref;
    connections = [];
    connectionQueue = async.queue((function(_this) {
      return function(number, callback) {
        return Connection.open(function(connection) {
          connections.push(connection);
          return callback();
        });
      };
    })(this));
    for (index = i = 1, ref = numberOfConnections; 1 <= ref ? i <= ref : i >= ref; index = 1 <= ref ? ++i : --i) {
      connectionQueue.push(index);
    }
    return connectionQueue.drain = function() {
      return callback(connections);
    };
  };

  function Connection(readyCallback) {
    this.ftp = new Ftp();
    this.ftp.connect({
      host: 'ftp.sec.gov'
    });
    this.ftp.on('ready', (function(_this) {
      return function() {
        return readyCallback(_this);
      };
    })(this));
  }

  Connection.prototype.readStream = function(stream, callback) {
    var chunks;
    chunks = [];
    stream.on('error', function(error) {
      if (typeof callback === "function") {
        callback(error);
      }
      return callback = null;
    });
    stream.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    return stream.on('end', function() {
      if (typeof callback === "function") {
        callback(null, Buffer.concat(chunks).toString());
      }
      return callback = null;
    });
  };

  Connection.prototype.getGzip = function(path, callback) {
    return this.get(path, (function(_this) {
      return function(error, stream) {
        if (error != null) {
          return callback(error);
        } else {
          return _this.readStream(stream.pipe(zlib.createGunzip()), callback);
        }
      };
    })(this));
  };

  Connection.prototype.getString = function(path, callback) {
    return this.get(path, (function(_this) {
      return function(error, stream) {
        if (error != null) {
          return callback(error);
        } else {
          return _this.readStream(stream, callback);
        }
      };
    })(this));
  };

  Connection.prototype.get = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this.ftp).get.apply(ref, args);
  };

  Connection.prototype.list = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this.ftp).list.apply(ref, args);
  };

  Connection.prototype.close = function() {
    return this.ftp.end();
  };

  return Connection;

})();

// ---
// generated by coffee-script 1.9.2
