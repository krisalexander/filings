var async, parseReportingCompanies, readMasterIndex;

async = require('async');

readMasterIndex = function(connection, year, quarter, callback) {
  return connection.getGzip("/edgar/full-index/" + year + "/QTR" + quarter + "/master.gz", (function(_this) {
    return function(error, data) {
      if (error != null) {
        return callback(error);
      } else {
        return callback(null, data, year, quarter);
      }
    };
  })(this));
};

parseReportingCompanies = function(quarters, reportName) {
  var cik, companies, i, j, len, len1, line, name, quarter, ref, segments;
  companies = [];
  for (i = 0, len = quarters.length; i < len; i++) {
    quarter = quarters[i];
    ref = quarter.split('\n');
    for (j = 0, len1 = ref.length; j < len1; j++) {
      line = ref[j];
      segments = line.split('|');
      if (segments.length !== 5) {
        continue;
      }
      if (companies[segments[0]] != null) {
        continue;
      }
      if (segments[2] !== reportName) {
        continue;
      }
      if (!/^\d+$/.test(segments[0])) {
        continue;
      }
      cik = segments[0];
      name = segments[1].trim();
      companies.push({
        cik: cik,
        name: name
      });
    }
  }
  return companies;
};

module.exports = {
  fetch: function(connection, callback) {
    var operations, processQuarter, quarterIndices, year;
    year = "" + (new Date().getFullYear() - 1);
    quarterIndices = [];
    processQuarter = function(quarter, callback) {
      return readMasterIndex(connection, year, quarter, function(error, data, year, quarter) {
        if (error != null) {
          return callback(error);
        } else {
          quarterIndices[quarter - 1] = data;
          return callback();
        }
      });
    };
    operations = [];
    [1, 2, 3, 4].forEach(function(quarter) {
      return operations.push(function(callback) {
        return processQuarter(quarter, callback);
      });
    });
    return async.waterfall(operations, function(error) {
      var companies;
      if (error != null) {
        return callback(error);
      } else {
        quarterIndices.reverse();
        companies = parseReportingCompanies(quarterIndices, '10-K');
        return callback(null, companies);
      }
    });
  }
};

// ---
// generated by coffee-script 1.9.2
