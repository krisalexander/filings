var DOMParser, FormFour, fs, path, xpath;

fs = require('fs');

path = require('path');

DOMParser = require('xmldom').DOMParser;

xpath = require('xpath');

module.exports = FormFour = (function() {
  FormFour.fetch = function(connection, transaction, callback) {
    var transactionPath;
    transactionPath = "/edgar/data/" + transaction.cik + "/" + transaction.id;
    return connection.list(transactionPath, function(error, files) {
      var i, len, name;
      if (files == null) {
        files = [];
      }
      for (i = 0, len = files.length; i < len; i++) {
        name = files[i].name;
        if (path.extname(name) !== '.xml') {
          continue;
        }
        connection.getString(transactionPath + "/" + name, function(error, contents) {
          if (error != null) {
            return callback(error);
          } else {
            return callback(null, new FormFour(contents));
          }
        });
        return;
      }
      return callback(new Error("Form 4 file not found in: " + transactionPath));
    });
  };

  FormFour.open = function(path, callback) {
    return fs.readFile(path, {
      encoding: 'utf8'
    }, function(error, data) {
      if (error != null) {
        return callback(error);
      } else {
        return callback(null, new FormFour(data));
      }
    });
  };

  function FormFour(contents1) {
    this.contents = contents1;
    this.document = new DOMParser().parseFromString(this.contents);
  }

  FormFour.prototype.getTransaction = function(transactionNode) {
    var cost, date, price, shares;
    date = Date.parse(xpath.select('transactionDate/value/text()', transactionNode).toString());
    if (isNaN(date)) {
      return null;
    }
    shares = parseInt(xpath.select('transactionAmounts/transactionShares/value/text()', transactionNode).toString());
    if (isNaN(shares)) {
      return null;
    }
    if (xpath.select('transactionAmounts/transactionPricePerShare/value', transactionNode).length === 1) {
      price = parseFloat(xpath.select('transactionAmounts/transactionPricePerShare/value/text()', transactionNode).toString());
    } else {
      price = 0;
    }
    if (isNaN(price)) {
      return null;
    }
    cost = shares * price;
    return {
      date: date,
      shares: shares,
      price: price,
      cost: cost
    };
  };

  FormFour.prototype.getAcquisitions = function() {
    var acquisition, acquisitions, i, len, transaction, transactions;
    acquisitions = [];
    transactions = xpath.select('//nonDerivativeTransaction', this.document);
    for (i = 0, len = transactions.length; i < len; i++) {
      transaction = transactions[i];
      if (xpath.select('transactionAmounts/transactionAcquiredDisposedCode/value/text()', transaction).toString() !== 'A') {
        continue;
      }
      acquisition = this.getTransaction(transaction);
      if (acquisition != null) {
        acquisitions.push(acquisition);
      }
    }
    return acquisitions;
  };

  FormFour.prototype.getDisposals = function() {
    var disposal, disposals, i, len, transaction, transactions;
    disposals = [];
    transactions = xpath.select('//nonDerivativeTransaction', this.document);
    for (i = 0, len = transactions.length; i < len; i++) {
      transaction = transactions[i];
      if (xpath.select('transactionAmounts/transactionAcquiredDisposedCode/value/text()', transaction).toString() !== 'D') {
        continue;
      }
      disposal = this.getTransaction(transaction);
      if (disposal != null) {
        disposals.push(disposal);
      }
    }
    return disposals;
  };

  FormFour.prototype.getOwner = function() {
    var cik, name, title;
    cik = xpath.select('//reportingOwner/reportingOwnerId/rptOwnerCik/text()', this.document).toString();
    name = xpath.select('//reportingOwner/reportingOwnerId/rptOwnerName/text()', this.document).toString();
    title = xpath.select('//reportingOwner/reportingOwnerRelationship/officerTitle/text()', this.document).toString();
    return {
      cik: cik,
      name: name,
      title: title
    };
  };

  FormFour.prototype.getProfit = function() {
    var acquiredCost, acquiredShares, cost, disposedCost, disposedShares, i, j, len, len1, ref, ref1, ref2, ref3, shares;
    acquiredShares = 0;
    acquiredCost = 0;
    ref = this.getAcquisitions();
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], shares = ref1.shares, cost = ref1.cost;
      acquiredShares += shares;
      acquiredCost += cost;
    }
    disposedShares = 0;
    disposedCost = 0;
    ref2 = this.getDisposals();
    for (j = 0, len1 = ref2.length; j < len1; j++) {
      ref3 = ref2[j], shares = ref3.shares, cost = ref3.cost;
      disposedShares += shares;
      disposedCost += cost;
    }
    if (acquiredShares === disposedShares) {
      return disposedCost - acquiredCost;
    } else {
      return 0;
    }
  };

  return FormFour;

})();

// ---
// generated by coffee-script 1.9.2
